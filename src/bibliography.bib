@article{Berner-Lee_The_samantic_web,
  author  = {Berners-Lee, Tim and Hendler, James and Lassila, Ora},
  year    = {2001},
  month   = {05},
  pages   = {1},
  title   = {The Semantic Web: A New Form of Web Content That is Meaningful to Computers Will Unleash a Revolution of New Possibilities},
  journal = {ScientificAmerican.com}
}

@article{Mauro_Tiziana_linked_data,
  author   = {Guerrini,Mauro and Possemato,Tiziana},
  year     = {2013},
  title    = {Linked data: a new alphabet for the semantic web},
  journal  = {JLIS.it},
  volume   = {4},
  number   = {1},
  pages    = {67--70},
  note     = {Copyright - Copyright University of Florence, Department of Studies on the Antiquities, Middle Age, the Renaissance and Linguistics 2013; Last updated - 2018-09-24},
  abstract = {The paper defines the linked data as a set of best practices that are used to publish data on the web using a machine; the technology (or mode of realization) of linked data is associated with the concept of the semantic web. It is the area of the semantic web, or web of data, as defined by Tim Berners-Lee "A web of things in the world, described by data on the web". The paper highlights the continuities and differences between semantic web and web traditional, or web documents. The analysis of linked data takes place within the world of libraries, archives and museums, traditionally committed to high standards for structuring and sharing of data. The data, in fact, assume the role of generating quality information for the network. The production of linked data requires compliance with rules and the use of specific technologies and languages, especially in the case of publication of linked data in open mode. The production cycle of linked data may be the track, or a guideline, for institutions that wish to join projects to publish their data. Data quality is assessed through a rating system designed by Tim Berners-Lee.},
  keywords = {Library And Information Sciences; Library linked Data; RDF; Semantic web},
  isbn     = {20385366},
  language = {English},
  url      = {https://www-proquest-com.ezproxy.uio.no/scholarly-journals/linked-data-new-alphabet-semantic-web/docview/1270767702/se-2?accountid=14699}
}

%RDF
@book{FOSWT,
  author    = {Hitzler, Pascal and Krtzsch, Markus and Rudolph, Sebastian},
  title     = {Foundations of Semantic Web Technologies},
  year      = {2009},
  isbn      = {9781420090505},
  publisher = {Chapman and Hall/CRC},
  edition   = {1st},
  abstract  = {With more substantial funding from research organizations and industry, numerous large-scale applications, and recently developed technologies, the Semantic Web is quickly emerging as a well-recognized and important area of computer science. While Semantic Web technologies are still rapidly evolving, Foundations of Semantic Web Technologies focuses on the established foundations in this area that have become relatively stable over time. It thoroughly covers basic introductions and intuitions, technical details, and formal foundations.The book concentrates on Semantic Web technologies standardized by the World Wide Web Consortium: RDF and SPARQL enable data exchange and querying, RDFS and OWL provide expressive ontology modeling, and RIF supports rule-based modeling. The text also describes methods for specifying, querying, and reasoning with ontological information. In addition, it explores topics that are clearly beyond foundations, such as tools, applications, and engineering aspects.Written by highly respected researchers with a deep understanding of the material, this text centers on the formal specifications of the subject and supplies many pointers that are useful for employing Semantic Web technologies in practice.Updates, errata, slides for teaching, and links to further resources are available at http://semantic-web-book.org/}
}

@techreport{W3C_RDF,
  author      = {Richard Cyganiak and Markus Lanthaler and David Wood},
  title       = {{RDF} 1.1 Concepts and Abstract Syntax},
  month       = feb,
  note        = {https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/},
  year        = {2014},
  bibsource   = {https://w2.syronex.com/jmr/w3c-biblio},
  type        = {{W3C} Recommendation},
  institution = {W3C}
}

@techreport{Turtle,
  author      = {Gavin Carothers and Eric Prud'hommeaux},
  title       = {{RDF} 1.1 Turtle},
  month       = feb,
  note        = {https://www.w3.org/TR/2014/REC-turtle-20140225/},
  year        = {2014},
  bibsource   = {https://w2.syronex.com/jmr/w3c-biblio},
  type        = {{W3C} Recommendation},
  institution = {W3C}
}
% RDF END



%SPARQL START
@techreport{SPARQL,
  author      = {Eric Prud'hommeaux and Andy Seaborne},
  title       = {{SPARQL} Query Language for {RDF}},
  month       = jan,
  note        = {https://www.w3.org/TR/2008/REC-rdf-sparql-query-20080115/},
  year        = {2008},
  bibsource   = {https://w2.syronex.com/jmr/w3c-biblio},
  type        = {{W3C} Recommendation},
  institution = {W3C}
}


@techreport{SPARQL1.1,
  author      = {Andy Seaborne and Steven Harris},
  title       = {{SPARQL} 1.1 Query Language},
  month       = mar,
  note        = {https://www.w3.org/TR/2013/REC-sparql11-query-20130321/},
  year        = {2013},
  bibsource   = {https://w2.syronex.com/jmr/w3c-biblio},
  type        = {{W3C} Recommendation},
  institution = {W3C}
}

@techreport{SPARQL1.1Update,
  author      = {Axel Polleres and Paula Gearon and Alexandre Passant},
  title       = {{SPARQL} 1.1 Update},
  month       = mar,
  note        = {https://www.w3.org/TR/2013/REC-sparql11-update-20130321/},
  year        = {2013},
  bibsource   = {https://w2.syronex.com/jmr/w3c-biblio},
  type        = {{W3C} Recommendation},
  institution = {W3C}
}

@article{SPARQL_well-known,
  author     = {P\'{e}rez, Jorge and Arenas, Marcelo and Gutierrez, Claudio},
  title      = {Semantics and Complexity of SPARQL},
  year       = {2009},
  issue_date = {August 2009},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {34},
  number     = {3},
  issn       = {0362-5915},
  url        = {https://doi-org.ezproxy.uio.no/10.1145/1567274.1567278},
  doi        = {10.1145/1567274.1567278},
  abstract   = {SPARQL is the standard language for querying RDF data. In this article, we address systematically the formal study of the database aspects of SPARQL, concentrating in its graph pattern matching facility. We provide a compositional semantics for the core part of SPARQL, and study the complexity of the evaluation of several fragments of the language. Among other complexity results, we show that the evaluation of general SPARQL patterns is PSPACE-complete. We identify a large class of SPARQL patterns, defined by imposing a simple and natural syntactic restriction, where the query evaluation problem can be solved more efficiently. This restriction gives rise to the class of well-designed patterns. We show that the evaluation problem is coNP-complete for well-designed patterns. Moreover, we provide several rewriting rules for well-designed patterns whose application may have a considerable impact in the cost of evaluating SPARQL queries.},
  journal    = {ACM Trans. Database Syst.},
  month      = {sep},
  articleno  = {16},
  numpages   = {45},
  keywords   = {query language, semantic Web, RDF, Complexity, SPARQL}
}
%SPARQL END

%SHACL START
@article{SHACL_BOOK,
  title     = {Validating RDF data},
  author    = {Gayo, Jose Emilio Labra and Prud'Hommeaux, Eric and Boneva, Iovka and Kontokostas, Dimitris},
  journal   = {Synthesis Lectures on Semantic Web: Theory and Technology},
  volume    = {7},
  number    = {1},
  pages     = {1--328},
  year      = {2017},
  publisher = {Morgan \& Claypool Publishers}
}

@techreport{SHACL,
  author      = {Holger Knublauch and Dimitris Kontokostas},
  title       = {Shapes Constraint Language ({SHACL})},
  month       = jul,
  note        = {https://www.w3.org/TR/2017/REC-shacl-20170720/},
  year        = {2017},
  bibsource   = {https://w2.syronex.com/jmr/w3c-biblio},
  type        = {{W3C} Recommendation},
  institution = {W3C}
}

@techreport{Shape_working_group,
  author      = {C. Arnaud Le Hors},
  title       = {RDF Data Shapes Working Group Charter},
  month       = jul,
  note        = {https://www.w3.org/TR/2017/REC-shacl-20170720/},
  year        = {2017},
  bibsource   = {http://www.w3.org/2014/data-shapes/charter},
  institution = {W3C}
}


%SHACL END


%OTTR START
@online{OTTR_online,
  title   = {Reasonable Ontology Templates (OTTR)},
  url     = {https://ottr.xyz/},
  urldate = {2021-09-21}
}

@online{OTTR_online_benefits,
  title   = {Reasonable Ontology Templates (OTTR)},
  url     = {https://ottr.xyz/#Benefits},
  urldate = {2021-09-21}
}

@online{OTTR_tabOTTR,
  author  = {Kj{\ae}veland, Martin G.},
  title   = {Tabular OTTR template instances (tabOTTR)},
  url     = {https://spec.ottr.xyz/tabOTTR/0.3/},
  urldate = {2021-09-21}
}

@online{OTTR_bOTTR,
  author  = {Kj{\ae}veland, Martin G.},
  title   = {Batch Instantiation of OTTR templates (bOTTR)},
  url     = {https://spec.ottr.xyz/bOTTR/0.1/},
  urldate = {2021-09-21}
}

@online{OTTR_rOTTR,
  author  = {Kj{\ae}veland, Martin G. and Karlsen, Leif Harald},
  title   = {Adapting Reasonable Ontology Templates to RDF (rOTTR)},
  url     = {https://spec.ottr.xyz/rOTTR/0.2/},
  urldate = {2021-12-09}
}

@online{OTTR_mOTTR,
  author  = {Karlsen, Leif Harald, and kj{\ae}veland, Martin G.},
  title   = {Concepts and Abstract Model for Reasonable Ontology Templates (mOTTR)},
  year    = 2019,
  month   = 3,
  url     = {https://spec.ottr.xyz/mOTTR/0.1/},
  urldate = {2021-05-14}
}

@online{OTTR_stOTTR,
  author  = {Karlsen, Leif Harald, and kj{\ae}veland, Martin G.},
  title   = {Concepts and Abstract Model for Reasonable Ontology Templates (mOTTR)},
  year    = 2019,
  month   = 10,
  url     = {https://spec.ottr.xyz/stOTTR/0.1/},
  urldate = {2021-05-14}
}

%KILDE 1
@article{SLKK_OTTR_2021,
  author  = {Skj{\ae}veland, Martin G.
             and Lupp, Daniel P.
             and Karlsen, Leif Harald
             and Klüwe, Johan W},
  title   = {OTTR: Formal Templates for Pattern-Based
             Ontology Engineering},
  journal = {X},
  volume  = {X},
  number  = {X},
  year    = {X}
}

%KILDE 2
@inproceedings{SLKF_OTTR_2018,
  author    = {Skj{\ae}veland, Martin G.
               and Lupp, Daniel P.
               and Karlsen, Leif Harald
               and Forssell, Henrik},
  editor    = {Vrande{\v{c}}i{\'{c}}, Denny
               and Bontcheva, Kalina
               and Su{\'a}rez-Figueroa, Mari Carmen
               and Presutti, Valentina
               and Celino, Irene
               and Sabou, Marta
               and Kaffee, Lucie-Aim{\'e}e
               and Simperl, Elena},
  title     = {Practical Ontology Pattern Instantiation, Discovery, and Maintenance with Reasonable Ontology Templates},
  booktitle = {The Semantic Web -- ISWC 2018},
  year      = {2018},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {477--494},
  abstract  = {Reasonable Ontology Templates () is a language for representing ontology modelling patterns in the form of parameterised ontologies. Ontology templates are simple and powerful abstractions useful for constructing, interacting with, and maintaining ontologies. With ontology templates, modelling patterns can be uniquely identified and encapsulated, broken down into convenient and manageable pieces, instantiated, and used as queries. Formal relations defined over templates support sophisticated maintenance tasks for sets of templates, such as revealing redundancies and suggesting new templates for representing implicit patterns. Ontology templates are designed for practical use; an vocabulary, convenient serialisation formats for the semantic web and for terse specification of template definitions and bulk instances are available, including an open source implementation for using templates. Our approach is successfully tested on a real-world large-scale ontology in the engineering domain.},
  isbn      = {978-3-030-00671-6}
}
%OTTR END

%Implementation START
@misc{antlr4Book,
  language  = {eng},
  address   = {Dallas, Texas},
  author    = {Parr, Terence (Terence John)},
  keywords  = {Parsing (Computer grammar);Programming languages (Electronic computers)-- Syntax;Java (Computer program language)},
  abstract  = {Programmers run into parsing problems all the time. Whether it's a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language--ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features.},
  publisher = {The Pragmatic Bookself},
  isbn      = {1-941222-62-5},
  year      = {2012},
  title     = {The definitive ANTLR 4 reference},
  edition   = {2nd edition.}
}

@online{apache_jena,
  title   = {Project Information},
  url     = {https://projects.apache.org/project.html?jena},
  urldate = {2022-01-24}
}

@article{RecursionSPARQL,
  language  = {eng},
  address   = {AMSTERDAM},
  author    = {Reutter, Juan L and Soto, Adrian and Vrgoc, Domagoj},
  keywords  = {Computer Science ; Computer Science, Artificial Intelligence ; Computer Science, Information Systems ; Computer Science, Theory & Methods ; Science & Technology ; Technology},
  issn      = {1570-0844},
  abstract  = {The need for recursive queries in the Semantic Web setting is becoming more and more apparent with the emergence of datasets where different pieces of information are connected by complicated patterns. This was acknowledged by the W3C committee by the inclusion of property paths in the SPARQL standard. However, as more data becomes available, it is becoming clear that property paths alone are not enough to capture all recursive queries that the users are interested in, and the literature has already proposed several extensions to allow searching for more complex patterns.
               We propose a rather different, but simpler approach: add a general purpose recursion operator directly to SPARQL. In this paper we provide a formal syntax and semantics for this proposal, study its theoretical properties, and develop algorithms for evaluating it in practical scenarios. We also show how to implement this extension as a plug-in on top of existing systems, and test its performance on several synthetic and real world datasets, ranging from small graphs, up to the entire Wikidata database.},
  journal   = {Semantic Web},
  pages     = {711--740},
  volume    = {12},
  publisher = {IOS PRESS},
  number    = {5},
  year      = {2021},
  title     = {Recursion in SPARQL}
}

@article{MosserSPARQL,
  copyright = {2020 Elsevier Ltd},
  language  = {eng},
  author    = {Mosser, Matthieu and Pieressa, Fernando and Reutter, Juan L and Soto, Adrián and Vrgoč, Domagoj},
  keywords  = {Algorithms ; Analysis ; API ; Bees ; JSON ; Semantic web ; SERVICE ; SPARQL ; Web sites},
  issn      = {0306-4379},
  abstract  = {Although the amount of RDF data has been steadily increasing over the years, the majority of information on the Web is still residing in other formats, and is often not accessible to Semantic Web services. A lot of this data is available through APIs serving JSON documents. In this work we propose a way of extending SPARQL with the option to consume JSON APIs and integrate this information into SPARQL query answers, obtaining a language that combines data from the “traditional” Web to the Semantic Web. Our proposal is based on an extension of the SERVICE operator with the ability to connect to JSON APIs. With the aim of evaluating these queries as efficiently as possible, we show that the main bottleneck is the amount of API requests, and present an algorithm that produces “worst-case optimal” query plans that reduce the number of requests as much as possible. We note that the analysis of this algorithm is studied in terms of an algorithm for evaluating relational queries with access methods with the minimal number of access queries, which is of independent interest. We show the superiority of the worst-case optimal approach in a series of experiments that take existing SPARQL benchmarks, and augment them with the ability to connect to JSON APIs in order to obtain additional information.
               •We present a general extension for API SERVICE calls, that can handle JSON arrays.•We provide a full proof of the worst case optimal bound for the number of API calls.•We do an extensive experimental evaluation of our implementation of the extended SERVICE.•We show a detailed comparison of our approach with the previous work.},
  journal   = {Information systems (Oxford)},
  pages     = {101650},
  volume    = {105},
  publisher = {Elsevier Ltd},
  year      = {2022},
  title     = {Querying APIs with SPARQL}
}

@article{PerezSPARQL,
  copyright = {Copyright 2009 Elsevier B.V., All rights reserved.},
  language  = {eng},
  address   = {NEW YORK},
  author    = {Pérez, Jorge and Arenas, Marcelo and Gutierrez, Claudio},
  keywords  = {Applied sciences ; Artificial intelligence ; Complexity ; Computer Science ; Computer Science, Information Systems ; Computer Science, Software Engineering ; Computer science; control theory; systems ; Computer systems and distributed systems. User interface ; Exact sciences and technology ; Information retrieval. Graph ; Information systems. Data bases ; Memory organisation. Data processing ; Query language ; RDF ; Science & Technology ; Semantic Web ; Software ; SPARQL ; Speech and sound recognition and synthesis. Linguistics ; Technology ; Theoretical computing},
  issn      = {0362-5915},
  abstract  = {SPARQL is the standard language for querying RDF data. In this article, we address systematically the formal study of the database aspects of SPARQL, concentrating in its graph pattern matching facility. We provide a compositional semantics for the core part of SPARQL, and study the complexity of the evaluation of several fragments of the language. Among other complexity results, we show that the evaluation of general SPARQL patterns is PSPACE-complete. We identify a large class of SPARQL patterns, defined by imposing a simple and natural syntactic restriction, where the query evaluation problem can be solved more efficiently. This restriction gives rise to the class of well-designed patterns. We show that the evaluation problem is coNP-complete for well-designed patterns. Moreover, we provide several rewriting rules for well-designed patterns whose application may have a considerable impact in the cost of evaluating SPARQL queries.},
  journal   = {ACM transactions on database systems},
  pages     = {1--45},
  volume    = {34},
  publisher = {ACM},
  number    = {3},
  year      = {2009},
  title     = {Semantics and complexity of SPARQL}
}


%Implementation END
